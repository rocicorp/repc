#![allow(clippy::redundant_field_names)]

// automatically generated by the FlatBuffers compiler, do not modify

use std::cmp::Ordering;
use std::mem;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(unused_imports, dead_code)]
pub mod leaf {

  use std::cmp::Ordering;
  use std::mem;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;

  pub enum LeafEntryOffset {}
  #[derive(Copy, Clone, Debug, PartialEq)]

  pub struct LeafEntry<'a> {
    pub _tab: flatbuffers::Table<'a>,
  }

  impl<'a> flatbuffers::Follow<'a> for LeafEntry<'a> {
    type Inner = LeafEntry<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
      Self {
        _tab: flatbuffers::Table { buf: buf, loc: loc },
      }
    }
  }

  impl<'a> LeafEntry<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
      LeafEntry { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
      _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
      args: &'args LeafEntryArgs<'args>,
    ) -> flatbuffers::WIPOffset<LeafEntry<'bldr>> {
      let mut builder = LeafEntryBuilder::new(_fbb);
      if let Some(x) = args.val {
        builder.add_val(x);
      }
      if let Some(x) = args.key {
        builder.add_key(x);
      }
      builder.finish()
    }

    pub const VT_KEY: flatbuffers::VOffsetT = 4;
    pub const VT_VAL: flatbuffers::VOffsetT = 6;

    #[inline]
    pub fn key(&self) -> Option<&'a [u8]> {
      self
        ._tab
        .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(LeafEntry::VT_KEY, None)
        .map(|v| v.safe_slice())
    }
    #[inline]
    pub fn val(&self) -> Option<&'a [u8]> {
      self
        ._tab
        .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(LeafEntry::VT_VAL, None)
        .map(|v| v.safe_slice())
    }
  }

  pub struct LeafEntryArgs<'a> {
    pub key: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub val: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
  }
  impl<'a> Default for LeafEntryArgs<'a> {
    #[inline]
    fn default() -> Self {
      LeafEntryArgs {
        key: None,
        val: None,
      }
    }
  }
  pub struct LeafEntryBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
  }
  impl<'a: 'b, 'b> LeafEntryBuilder<'a, 'b> {
    #[inline]
    pub fn add_key(&mut self, key: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
      self
        .fbb_
        .push_slot_always::<flatbuffers::WIPOffset<_>>(LeafEntry::VT_KEY, key);
    }
    #[inline]
    pub fn add_val(&mut self, val: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
      self
        .fbb_
        .push_slot_always::<flatbuffers::WIPOffset<_>>(LeafEntry::VT_VAL, val);
    }
    #[inline]
    pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> LeafEntryBuilder<'a, 'b> {
      let start = _fbb.start_table();
      LeafEntryBuilder {
        fbb_: _fbb,
        start_: start,
      }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<LeafEntry<'a>> {
      let o = self.fbb_.end_table(self.start_);
      flatbuffers::WIPOffset::new(o.value())
    }
  }

  pub enum LeafOffset {}
  #[derive(Copy, Clone, Debug, PartialEq)]

  pub struct Leaf<'a> {
    pub _tab: flatbuffers::Table<'a>,
  }

  impl<'a> flatbuffers::Follow<'a> for Leaf<'a> {
    type Inner = Leaf<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
      Self {
        _tab: flatbuffers::Table { buf: buf, loc: loc },
      }
    }
  }

  impl<'a> Leaf<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
      Leaf { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
      _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
      args: &'args LeafArgs<'args>,
    ) -> flatbuffers::WIPOffset<Leaf<'bldr>> {
      let mut builder = LeafBuilder::new(_fbb);
      if let Some(x) = args.entries {
        builder.add_entries(x);
      }
      builder.finish()
    }

    pub const VT_ENTRIES: flatbuffers::VOffsetT = 4;

    #[inline]
    pub fn entries(
      &self,
    ) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<LeafEntry<'a>>>> {
      self._tab.get::<flatbuffers::ForwardsUOffset<
        flatbuffers::Vector<flatbuffers::ForwardsUOffset<LeafEntry<'a>>>,
      >>(Leaf::VT_ENTRIES, None)
    }
  }

  pub struct LeafArgs<'a> {
    pub entries: Option<
      flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<LeafEntry<'a>>>>,
    >,
  }
  impl<'a> Default for LeafArgs<'a> {
    #[inline]
    fn default() -> Self {
      LeafArgs { entries: None }
    }
  }
  pub struct LeafBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
  }
  impl<'a: 'b, 'b> LeafBuilder<'a, 'b> {
    #[inline]
    pub fn add_entries(
      &mut self,
      entries: flatbuffers::WIPOffset<
        flatbuffers::Vector<'b, flatbuffers::ForwardsUOffset<LeafEntry<'b>>>,
      >,
    ) {
      self
        .fbb_
        .push_slot_always::<flatbuffers::WIPOffset<_>>(Leaf::VT_ENTRIES, entries);
    }
    #[inline]
    pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> LeafBuilder<'a, 'b> {
      let start = _fbb.start_table();
      LeafBuilder {
        fbb_: _fbb,
        start_: start,
      }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<Leaf<'a>> {
      let o = self.fbb_.end_table(self.start_);
      flatbuffers::WIPOffset::new(o.value())
    }
  }

  #[inline]
  pub fn get_root_as_leaf<'a>(buf: &'a [u8]) -> Leaf<'a> {
    flatbuffers::get_root::<Leaf<'a>>(buf)
  }

  #[inline]
  pub fn get_size_prefixed_root_as_leaf<'a>(buf: &'a [u8]) -> Leaf<'a> {
    flatbuffers::get_size_prefixed_root::<Leaf<'a>>(buf)
  }

  #[inline]
  pub fn finish_leaf_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Leaf<'a>>,
  ) {
    fbb.finish(root, None);
  }

  #[inline]
  pub fn finish_size_prefixed_leaf_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Leaf<'a>>,
  ) {
    fbb.finish_size_prefixed(root, None);
  }
} // pub mod leaf
